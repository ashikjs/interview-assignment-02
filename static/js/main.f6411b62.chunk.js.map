{"version":3,"sources":["data-store/actions/restaurant/index.ts","components/restaurant-finder/index.tsx","components/restaurant-item/index.tsx","components/restaurant-list/index.tsx","data-store/actions/location/index.ts","deserializ/restaurant/index.ts","share/services/restaurant/restaurant.service.ts","components/google-map/index.tsx","components/restaurant-details/index.tsx","pages/home/index.tsx","layout/header/index.tsx","layout/footer/index.tsx","App.tsx","reportWebVitals.ts","data-store/reducers/location/index.ts","data-store/reducers/restaurant/index.ts","data-store/reducers/index.ts","middleware/logger-middleware.ts","index.tsx","data-store/store/index.ts"],"names":["RestaurantActions","RestaurantFinder","props","dispatch","useDispatch","className","type","size","onClick","SELECTED_RANDOM_RESTAURANT","payload","openRestaurantDetails","allowClear","onChange","e","onSearchRestaurant","target","value","placeholder","Paragraph","Typography","RestaurantItem","restaurant","name","iconUrl","address","category","Item","Meta","avatar","src","shape","alt","title","ellipsis","description","SELECTED_RESTAURANT","RestaurantList","LocationActions","restaurants","useSelector","state","skey","filter","toLowerCase","indexOf","grid","gutter","xs","sm","md","lg","xl","xxl","itemLayout","dataSource","renderItem","index","style","marginBottom","RestaurantDeserialize","restaurantBackendData","id","geocode","details","contact","popularity","price","rating","distance","this","fsq_id","generateAddress","location","geocodes","main","categories","generateCategoryIconUrl","toFixed","loc","crossStreet","cross_street","locality","country","icon","prefix","suffix","a","process","URL","headers","Accept","axios","get","results","status","data","map","res","GoogleMapView","lat","lng","zoom","height","width","googleMapsApiKey","mapContainerStyle","center","position","Title","RestaurantDetails","selectedRestaurant","visible","onClose","placement","padding","latitude","longitude","level","Home","useState","showResDetails","setShowResDetails","searchKey","setSearchKey","showRestaurantDetails","UPDATE_LOCATION_GEOCODE","UPDATE_LOCATION_RADIUS","getRestaurant","then","RESTAURANT_LIST","catch","error","console","info","sKey","Header","Layout","AppHeader","Footer","AppFooter","textAlign","Content","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","radius","sort","limit","rootReducer","combineReducers","action","fromLocationActions","fromRestaurantActions","randomRIndex","Math","floor","random","length","loggerMiddleware","store","next","group","result","log","getState","groupEnd","middleware","applyMiddleware","thunkMiddleware","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6411b62.chunk.js","sourcesContent":["import { Action } from 'redux-actions';\r\nimport { Restaurant } from '../../../models/restaurant';\r\n\r\nexport enum RestaurantActions {\r\n    RESTAURANT_LIST = '[RESTAURANT] List',\r\n    SELECTED_RANDOM_RESTAURANT = '[RESTAURANT] Random Selected',\r\n    SELECTED_RESTAURANT = '[RESTAURANT] Selected',\r\n}\r\n\r\nexport class RestaurantListType implements Action<Restaurant[]> {\r\n    readonly type = RestaurantActions.RESTAURANT_LIST;\r\n\r\n    constructor(public payload: Restaurant[]) {}\r\n}\r\n\r\nexport class SelectedRandomRestaurantType implements Action<any> {\r\n    readonly type = RestaurantActions.SELECTED_RANDOM_RESTAURANT;\r\n\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SelectedRestaurantType implements Action<Restaurant> {\r\n    readonly type = RestaurantActions.SELECTED_RESTAURANT;\r\n\r\n    constructor(public payload: Restaurant) {}\r\n}\r\n\r\nexport type RestaurantActionTypes =\r\n    | RestaurantListType\r\n    | SelectedRandomRestaurantType\r\n    | SelectedRestaurantType;\r\n","import React from 'react';\r\nimport { Button, Input } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport './Restaurant-finder.scss';\r\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\r\n\r\nfunction RestaurantFinder(props: any) {\r\n    const dispatch = useDispatch();\r\n    const getRandomRestaurant = () => {\r\n        dispatch({ type: RestaurantActions.SELECTED_RANDOM_RESTAURANT, payload: '' });\r\n        props.openRestaurantDetails();\r\n    };\r\n    const onChange = (e: any) => {\r\n        props.onSearchRestaurant(e.target.value);\r\n    };\r\n    return (\r\n        <section>\r\n            <div className=\"restaurant-finder\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    size=\"large\"\r\n                    onClick={getRandomRestaurant}\r\n                    data-testid=\"randomRestaurant\"\r\n                >\r\n                    Pick a Random Restaurant\r\n                </Button>\r\n                <span className=\"alter-text\">Or</span>\r\n                <Input\r\n                    allowClear\r\n                    onChange={onChange}\r\n                    placeholder=\"Search by name or category\"\r\n                    size=\"large\"\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default RestaurantFinder;\r\n","import React from 'react';\r\nimport { Avatar, Button, List, Typography } from 'antd';\r\nconst { Paragraph } = Typography;\r\nimport './Restaurant-item.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\r\n\r\nexport const RestaurantItem = (props: any) => {\r\n    const dispatch = useDispatch();\r\n    let { name, iconUrl, address, category } = props?.restaurant;\r\n\r\n    const openRestaurantDetails = () => {\r\n        props.openRestaurantDetails();\r\n        dispatch({ type: RestaurantActions.SELECTED_RESTAURANT, payload: props?.restaurant });\r\n    };\r\n\r\n    return (\r\n        <List.Item.Meta\r\n            className=\"restaurant-item\"\r\n            avatar={<Avatar src={iconUrl} size={80} shape=\"square\" alt={category} />}\r\n            title={<Paragraph ellipsis={true}>{name}</Paragraph>}\r\n            description={\r\n                <>\r\n                    <Paragraph ellipsis={true}>{address}</Paragraph>\r\n                    <Button type=\"primary\" size={'small'} onClick={openRestaurantDetails}>\r\n                        Details\r\n                    </Button>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { List } from 'antd';\r\n\r\n// @Component\r\nimport { RestaurantItem } from '../restaurant-item';\r\n\r\n// @Model\r\nimport { Restaurant } from '../../models/restaurant';\r\n\r\nfunction RestaurantList(props: any) {\r\n    let restaurants: Restaurant[];\r\n    restaurants = useSelector((state: any) => state?.restaurant?.restaurants);\r\n    if (props.skey) {\r\n        restaurants = restaurants.filter(\r\n            (restaurant) =>\r\n                restaurant.name?.toLowerCase().indexOf(props.skey.toLowerCase()) !== -1 ||\r\n                restaurant.category?.toLowerCase().indexOf(props.skey.toLowerCase()) !== -1\r\n        );\r\n    }\r\n    return (\r\n        <section>\r\n            <List\r\n                grid={{ gutter: 30, xs: 1, sm: 1, md: 2, lg: 2, xl: 3, xxl: 3 }}\r\n                itemLayout=\"vertical\"\r\n                dataSource={restaurants}\r\n                renderItem={(restaurant, index) => (\r\n                    <List.Item key={index} style={{ marginBottom: '30px' }}>\r\n                        <RestaurantItem\r\n                            restaurant={restaurant}\r\n                            openRestaurantDetails={props.openRestaurantDetails}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default RestaurantList;\r\n","import { Action } from 'redux-actions';\r\nimport { Geocode } from '../../../models/location';\r\n\r\nexport enum LocationActions {\r\n    UPDATE_LOCATION_GEOCODE = '[LOCATION] Update Geocode',\r\n    UPDATE_LOCATION_RADIUS = '[LOCATION] Update Radius',\r\n}\r\n\r\nexport class UpdateLocationGeocodeType implements Action<Geocode> {\r\n    readonly type = LocationActions.UPDATE_LOCATION_GEOCODE;\r\n\r\n    constructor(public payload: Geocode) {}\r\n}\r\n\r\nexport class UpdateLocationRadiusType implements Action<number> {\r\n    readonly type = LocationActions.UPDATE_LOCATION_RADIUS;\r\n\r\n    constructor(public payload: number) {}\r\n}\r\n\r\nexport type LocationActionTypes = UpdateLocationRadiusType | UpdateLocationGeocodeType;\r\n","import { Restaurant } from '../../models/restaurant';\r\nimport { Geocode } from '../../models/location';\r\n\r\nexport class RestaurantDeserialize implements Restaurant {\r\n    id: string;\r\n\r\n    name: string;\r\n\r\n    address: string;\r\n\r\n    iconUrl: string;\r\n\r\n    geocode: Geocode;\r\n\r\n    details?: string;\r\n\r\n    category: string;\r\n\r\n    contact?: string;\r\n\r\n    popularity?: string;\r\n\r\n    price?: string;\r\n\r\n    rating?: string;\r\n\r\n    distance?: string;\r\n\r\n    constructor(restaurantBackendData: any) {\r\n        this.id = restaurantBackendData.fsq_id;\r\n        this.name = restaurantBackendData.name;\r\n        this.address = this.generateAddress(restaurantBackendData.location);\r\n        this.geocode = restaurantBackendData.geocodes.main;\r\n        this.iconUrl = restaurantBackendData.categories[0]\r\n            ? this.generateCategoryIconUrl(restaurantBackendData.categories[0])\r\n            : '';\r\n        this.distance = (restaurantBackendData.distance / 1000).toFixed(2);\r\n        this.category = restaurantBackendData.categories[0]\r\n            ? restaurantBackendData.categories[0].name\r\n            : null;\r\n    }\r\n\r\n    private generateAddress(loc: any): string {\r\n        const crossStreet = loc.cross_street ? ' ' + loc.cross_street : '';\r\n        const locality = loc.locality ? ' ' + loc.locality : '';\r\n        return loc?.address ? loc?.address : loc.country + crossStreet + locality;\r\n    }\r\n\r\n    private generateCategoryIconUrl(category: any): string {\r\n        return category.icon.prefix + '120' + category.icon.suffix;\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { RestaurantDeserialize } from '../../../deserializ/restaurant';\r\n\r\nexport async function getRestaurant() {\r\n    const locationApi = process.env.REACT_APP_LOCATION_API;\r\n\r\n    const URL = `${locationApi}/restaurants`;\r\n\r\n    const headers = {\r\n        Accept: 'application/json',\r\n    };\r\n\r\n    const results = await axios.get(URL, { headers });\r\n\r\n    if (results.status === 200)\r\n        return results.data?.map((res: any) => new RestaurantDeserialize(res));\r\n\r\n    return null;\r\n}\r\n","import React from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nfunction GoogleMapView(props: any) {\r\n    const { lat, lng, zoom, height = '260px', width = '100%' } = props;\r\n    const apiKey = process.env.REACT_APP_MAP_API_KEY;\r\n    return (\r\n        <LoadScript googleMapsApiKey={`${apiKey}`}>\r\n            <GoogleMap mapContainerStyle={{ height, width }} center={{ lat, lng }} zoom={zoom}>\r\n                <Marker position={{ lat, lng }} />\r\n            </GoogleMap>\r\n        </LoadScript>\r\n    );\r\n}\r\n\r\nexport default GoogleMapView;\r\n","import React from 'react';\r\nimport { Avatar, Typography, Space, Drawer } from 'antd';\r\n\r\nimport './restaurant-details.scss';\r\n\r\nimport GoogleMapView from '../google-map';\r\nimport { useSelector } from 'react-redux';\r\nimport { Restaurant } from '../../models/restaurant';\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction RestaurantDetails(props: any) {\r\n    const mapZoomLevel: number = 16;\r\n    const restaurant: Restaurant = useSelector((state: any) => state.restaurant.selectedRestaurant);\r\n\r\n    const { visible, onClose } = props;\r\n    const {\r\n        name,\r\n        category,\r\n        geocode,\r\n        address,\r\n        popularity,\r\n        price,\r\n        rating,\r\n        iconUrl,\r\n        distance,\r\n        details,\r\n    } = restaurant;\r\n    return (\r\n        <Drawer\r\n            className={'restaurant-details-drawer'}\r\n            title={`Restaurant details`}\r\n            placement=\"right\"\r\n            width={600}\r\n            onClose={onClose}\r\n            visible={visible}\r\n            style={{ padding: 0 }}\r\n        >\r\n            <GoogleMapView lat={geocode.latitude} lng={geocode.longitude} zoom={mapZoomLevel} />\r\n            <div className=\"restaurant-details\">\r\n                <Title level={2}>{name}</Title>\r\n                <Title level={5}>{address}</Title>\r\n                {!!details && <p>{details}</p>}\r\n                <Space size={10} className=\"categories\">\r\n                    <Avatar src={iconUrl} alt={category} />\r\n                    <span>{category}</span>\r\n                </Space>\r\n\r\n                <ul>\r\n                    {!!distance && (\r\n                        <li>\r\n                            <b>Distance:</b> {distance}Km\r\n                        </li>\r\n                    )}\r\n                    {!!popularity && (\r\n                        <li>\r\n                            <b>Popularity:</b> {popularity}\r\n                        </li>\r\n                    )}\r\n                    {!!price && (\r\n                        <li>\r\n                            <b>Price:</b> {price}\r\n                        </li>\r\n                    )}\r\n                    {!!rating && (\r\n                        <li>\r\n                            <b>Rating:</b> {rating}\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default RestaurantDetails;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// @Components\r\nimport RestaurantFinder from '../../components/restaurant-finder';\r\nimport RestaurantList from '../../components/restaurant-list';\r\n\r\n// @Action\r\nimport { LocationActions } from '../../data-store/actions/location';\r\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\r\n\r\n// @Model\r\nimport { Restaurant } from '../../models/restaurant';\r\n\r\n// @Service\r\nimport { getRestaurant } from '../../share/services/restaurant';\r\nimport RestaurantDetails from '../../components/restaurant-details';\r\n\r\nconst radius = 300;\r\nconst geocode = {\r\n    latitude: 23.7815271,\r\n    longitude: 90.3982979,\r\n};\r\n\r\nfunction Home() {\r\n    const dispatch = useDispatch();\r\n    const [showResDetails, setShowResDetails] = useState(false);\r\n    const [searchKey, setSearchKey] = useState(false);\r\n    const showRestaurantDetails = () => {\r\n        setShowResDetails(true);\r\n    };\r\n    const searchRestaurantByName = (sKey: any) => {\r\n        setSearchKey(sKey);\r\n    };\r\n    const onCloseRestaurantDetails = () => {\r\n        setShowResDetails(false);\r\n    };\r\n\r\n    dispatch({ type: LocationActions.UPDATE_LOCATION_GEOCODE, payload: geocode });\r\n    dispatch({ type: LocationActions.UPDATE_LOCATION_RADIUS, payload: radius });\r\n\r\n    function getAllRestaurants() {\r\n        getRestaurant()\r\n            .then((restaurants: Restaurant[]) => {\r\n                dispatch({ type: RestaurantActions.RESTAURANT_LIST, payload: restaurants });\r\n            })\r\n            .catch((error) => {\r\n                console.info('GetAllRestaurants::', error);\r\n            });\r\n    }\r\n\r\n    getAllRestaurants();\r\n\r\n    return (\r\n        <div className=\"Home wrapper-container\">\r\n            <RestaurantFinder\r\n                openRestaurantDetails={showRestaurantDetails}\r\n                onSearchRestaurant={searchRestaurantByName}\r\n            />\r\n            <RestaurantList openRestaurantDetails={showRestaurantDetails} skey={searchKey} />\r\n            {showResDetails ? (\r\n                <RestaurantDetails visible={showResDetails} onClose={onCloseRestaurantDetails} />\r\n            ) : (\r\n                ''\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nimport './header.scss';\r\n\r\nconst { Header } = Layout;\r\n\r\nfunction AppHeader() {\r\n    return (\r\n        <Header>\r\n            <div className=\"logo\">\r\n                <img src=\"images/logo.png\" className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nconst { Footer } = Layout;\r\n\r\nfunction AppFooter() {\r\n    return <Footer style={{ textAlign: 'center' }}>© 2021 Today All Rights Reserved</Footer>;\r\n}\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\r\nimport { Layout } from 'antd';\r\n\r\nimport './App.scss';\r\nimport Home from './pages/home';\r\nimport AppHeader from './layout/header';\r\nimport AppFooter from './layout/footer';\r\nconst { Content } = Layout;\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout className=\"layout\">\r\n                <AppHeader />\r\n                <Content>\r\n                    <div className=\"site-layout-content\">\r\n                        <Home />\r\n                    </div>\r\n                </Content>\r\n                <AppFooter />\r\n            </Layout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { LocationConfiguration } from '../../../models/location';\r\nimport * as fromLocationActions from '../../actions/location';\r\n\r\nconst initialState: LocationConfiguration = {\r\n    geocode: {\r\n        latitude: 0,\r\n        longitude: 0,\r\n    },\r\n    radius: 0,\r\n    categories: 13000,\r\n    sort: 'RELEVANCE',\r\n    limit: 50,\r\n};\r\n\r\nexport default function locationReducer(\r\n    state: LocationConfiguration = initialState,\r\n    action: fromLocationActions.LocationActionTypes\r\n) {\r\n    switch (action.type) {\r\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_GEOCODE: {\r\n            return {\r\n                ...state,\r\n                geocode: action.payload,\r\n            };\r\n        }\r\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_RADIUS: {\r\n            return {\r\n                ...state,\r\n                radius: action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import * as fromRestaurantActions from '../../actions/restaurant';\r\nimport { RestaurantState } from '../../../models/restaurant';\r\n\r\nconst initialState: RestaurantState = {\r\n    restaurants: [],\r\n    selectedRestaurant: null,\r\n};\r\n\r\nexport default function restaurantReducer(\r\n    state: RestaurantState = initialState,\r\n    action: fromRestaurantActions.RestaurantActionTypes\r\n) {\r\n    switch (action.type) {\r\n        case fromRestaurantActions.RestaurantActions.RESTAURANT_LIST: {\r\n            return {\r\n                ...state,\r\n                restaurants: action.payload,\r\n            };\r\n        }\r\n        case fromRestaurantActions.RestaurantActions.SELECTED_RANDOM_RESTAURANT: {\r\n            const randomRIndex = Math.floor(Math.random() * state.restaurants.length);\r\n\r\n            return {\r\n                ...state,\r\n                selectedRestaurant: state.restaurants[randomRIndex],\r\n            };\r\n        }\r\n        case fromRestaurantActions.RestaurantActions.SELECTED_RESTAURANT: {\r\n            return {\r\n                ...state,\r\n                selectedRestaurant: action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport locationReducer from './location';\r\nimport restaurantReducer from './restaurant';\r\n\r\nconst rootReducer = combineReducers<any>({\r\n    location: locationReducer,\r\n    restaurant: restaurantReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { Middleware } from 'redux';\r\n\r\nexport const loggerMiddleware: Middleware = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n    let result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport configureStore from './data-store/store';\r\n\r\nimport './index.less';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from '../reducers';\r\nimport { loggerMiddleware } from '../../middleware';\r\n\r\nexport default function configureStore(initialState?: any) {\r\n    const middleware = applyMiddleware(loggerMiddleware, thunkMiddleware);\r\n\r\n    const store = createStore(rootReducer as any, initialState as any, middleware);\r\n\r\n    return store;\r\n}\r\n"],"sourceRoot":""}