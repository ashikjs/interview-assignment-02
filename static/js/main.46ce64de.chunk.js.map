{"version":3,"sources":["components/restaurant-finder/restaurant.service.ts","components/restaurant-finder/index.tsx","components/restaurant-item/index.tsx","components/google-map/index.tsx","components/restaurant-details/index.tsx","components/restaurant-list/index.tsx","data-store/actions/location/index.ts","pages/home/index.tsx","layout/header/index.tsx","layout/footer/index.tsx","App.tsx","data-store/actions/restaurant/index.ts","reportWebVitals.ts","data-store/reducers/location/index.ts","data-store/reducers/restaurant/index.ts","data-store/reducers/index.ts","middleware/logger-middleware.ts","index.tsx","data-store/store/index.ts"],"names":["location","query","a","locationApi","process","REACT_APP_LOCATION_API","categoriesParams","categories","sortParams","sort","limitParams","limit","queryParams","URL","geocode","latitude","longitude","radius","headers","Accept","Authorization","axios","get","results","status","data","Search","Input","RestaurantFinder","useSelector","state","className","type","size","onClick","getRestaurant","then","r","console","log","catch","e","placeholder","loading","RestaurantItem","props","restaurant","name","imgUrl","address","Item","Meta","avatar","src","shape","title","description","style","marginBottom","openRestaurantDetails","GoogleMapView","lat","lng","zoom","height","width","googleMapsApiKey","mapContainerStyle","center","position","Title","Typography","RestaurantDetails","id","icon","prefix","suffix","main","cross_street","locality","postcode","visible","onClose","geocodes","popularity","price","rating","tel","crossStreet","placement","padding","level","map","category","index","RestaurantList","LocationActions","useState","setVisible","showRestaurantDetails","grid","gutter","xs","sm","md","lg","xl","xxl","itemLayout","dataSource","distance","renderItem","Home","dispatch","useDispatch","UPDATE_LOCATION_GEOCODE","payload","UPDATE_LOCATION_RADIUS","AppHeader","alt","AppFooter","textAlign","Content","Layout","App","RestaurantActions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","restaurants","selectedRestaurant","rootReducer","combineReducers","action","fromLocationActions","fromRestaurantActions","RESTAURANT_LIST_SUCCESS","SELECTED_RESTAURANT","loggerMiddleware","store","next","group","info","result","getState","groupEnd","middleware","applyMiddleware","thunkMiddleware","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46ce64de.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { LocationConfiguration } from '../../models/location';\r\n\r\nexport async function getRestaurant(location: LocationConfiguration, query?: any) {\r\n    const locationApi = process.env.REACT_APP_LOCATION_API;\r\n    const categoriesParams = location.categories ? `&categories=${location.categories}` : '';\r\n    const sortParams = location.sort ? `&sort=${location.sort}` : '';\r\n    const limitParams = location.limit ? `&sort=${location.limit}` : '';\r\n    const queryParams = query ? `&query=${query}` : '';\r\n\r\n    const URL =\r\n        locationApi +\r\n        `places/search?ll=${location.geocode?.latitude},${location.geocode?.longitude}&radius=${location.radius}${categoriesParams}${sortParams}${limitParams}${queryParams}`;\r\n    // console.log(URL);\r\n\r\n    const headers = {\r\n        Accept: 'application/json',\r\n        Authorization: 'fsq3eoIQWoWU3cbi90ZnsWYXHTvD16TvLeM2ZipHJoASdbE=',\r\n    };\r\n\r\n    const results = await axios.get(URL, { headers });\r\n\r\n    // console.log(results);\r\n    if (results.status === 200) return results.data;\r\n    return null;\r\n}\r\n","import React from 'react';\nimport { Button, Input } from 'antd';\nconst { Search } = Input;\nimport './Restaurant-finder.scss';\nimport { useSelector } from 'react-redux';\nimport { getRestaurant } from './restaurant.service';\n\nfunction RestaurantFinder() {\n    const isSearchLoading: boolean = false;\n    const location = useSelector((state: any) => state.location);\n\n    const getRandomRestaurant = () => {\n        getRestaurant(location)\n            .then((r) => {\n                console.log('Promiss:', r);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n        // console.log('location::', location);\n    };\n    return (\n        <section>\n            <div className=\"restaurant-finder\">\n                <Button type=\"primary\" size=\"large\" onClick={getRandomRestaurant}>\n                    Random Restaurant\n                </Button>\n                <span className=\"alter-text\">Or</span>\n                <Search\n                    placeholder=\"Search restaurant by key word\"\n                    loading={isSearchLoading}\n                    size=\"large\"\n                />\n            </div>\n        </section>\n    );\n}\n\nexport default RestaurantFinder;\n","import React from 'react';\nimport { Avatar, Button, List } from 'antd';\nimport './Restaurant-item.scss';\n\nexport const RestaurantItem = (props: any) => {\n    let { name, imgUrl, address } = props?.restaurant;\n    return (\n        <List.Item.Meta\n            className=\"restaurant-item\"\n            avatar={<Avatar src={imgUrl} size={80} shape=\"square\" />}\n            title={<span>{name}</span>}\n            description={\n                <>\n                    <p style={{ marginBottom: '5px' }}>{address}</p>\n                    <Button type=\"primary\" size={'small'} onClick={props.openRestaurantDetails}>\n                        Details\n                    </Button>\n                </>\n            }\n        />\n    );\n};\n","import React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nfunction GoogleMapView(props: any) {\n    const { lat, lng, zoom, height = '260px', width = '100%' } = props;\n    const apiKey = process.env.REACT_APP_MAP_API_KEY;\n    return (\n        <LoadScript googleMapsApiKey={`${apiKey}`}>\n            <GoogleMap mapContainerStyle={{ height, width }} center={{ lat, lng }} zoom={zoom}>\n                <Marker position={{ lat, lng }} />\n            </GoogleMap>\n        </LoadScript>\n    );\n}\n\nexport default GoogleMapView;\n","import React from 'react';\nimport { Avatar, Typography, Space, Drawer } from 'antd';\n\nimport './restaurant-details.scss';\n\nimport GoogleMapView from '../google-map';\n\nconst { Title } = Typography;\n\nfunction RestaurantDetails(props: any) {\n    const restaurant: any = {\n        fsq_id: 'object_id',\n        categories: [\n            {\n                id: '457',\n                name: 'Asian Restaurant',\n                icon: {\n                    prefix: 'https://ss3.4sqi.net/img/categories_v2/food/asian_',\n                    suffix: '.png',\n                },\n            },\n        ],\n        geocodes: {\n            main: {\n                latitude: 23.793330075666095,\n                longitude: 90.40322404501005,\n            },\n        },\n        location: {\n            address: 'House #15, Road #17, Block #C, Banani',\n            cross_street: 'Mir Showkat Avenue, Gulshan 2',\n            locality: 'Dhaka',\n            postcode: '1204',\n        },\n        name: 'Star Kabab & Restaurant',\n        popularity: 0.9024184476940382,\n        price: 2,\n        rating: 7.5,\n        tel: '01798-779900',\n    };\n\n    const { visible, onClose } = props;\n    const {\n        name,\n        categories,\n        geocodes: { main: geocodes },\n        location,\n        popularity,\n        price,\n        rating,\n        tel,\n    } = restaurant;\n    const { address, cross_street: crossStreet, locality, postcode } = location;\n    return (\n        <Drawer\n            className={'restaurant-details-drawer'}\n            title={`Restaurant details`}\n            placement=\"right\"\n            width={600}\n            onClose={onClose}\n            visible={visible}\n            style={{ padding: 0 }}\n        >\n            <GoogleMapView lat={geocodes.latitude} lng={geocodes.longitude} zoom={18} />\n            <div className=\"restaurant-details\">\n                <Title level={2}>{name}</Title>\n                <Title level={5}>\n                    {`${address}, ${crossStreet ? crossStreet + ',' : ''}\n                    ${locality ? locality + ',' : ''} ${postcode}`}\n                </Title>\n                {categories?.map((category: any, index: number) => (\n                    <Space size={10} className=\"categories\" key={index}>\n                        <Avatar src={category.icon.prefix + '120' + category.icon.suffix} />\n                        <span>{category.name}</span>\n                    </Space>\n                ))}\n\n                <ul>\n                    {!!tel && (\n                        <li>\n                            <b>Contact:</b> {tel}\n                        </li>\n                    )}\n                    {!!popularity && (\n                        <li>\n                            <b>Popularity:</b> {popularity}\n                        </li>\n                    )}\n                    {!!price && (\n                        <li>\n                            <b>Price:</b> {price}\n                        </li>\n                    )}\n                    {!!rating && (\n                        <li>\n                            <b>Rating:</b> {rating}\n                        </li>\n                    )}\n                </ul>\n            </div>\n        </Drawer>\n    );\n}\n\nexport default RestaurantDetails;\n","import React, { useState } from 'react';\n\nimport { List } from 'antd';\nimport { RestaurantItem } from '../restaurant-item';\nimport RestaurantDetails from '../restaurant-details';\n\nfunction RestaurantList() {\n    const [visible, setVisible] = useState(false);\n    const restaurants = [\n        {\n            id: '4bf390083f86c9b6ce4ab21c',\n            imgUrl: 'https://ss3.4sqi.net/img/categories_v2/food/default_120.png',\n            distance: 1404,\n            geocodes: {\n                main: {\n                    latitude: 23.793330075666095,\n                    longitude: 90.40322404501005,\n                },\n            },\n            address: 'House #15, Road #17, Block #C, Banani',\n            name: 'Rock Restaurant',\n        },\n        {\n            id: '4bf390083f86c9b6ce4ab21c',\n            imgUrl: 'https://ss3.4sqi.net/img/categories_v2/nightlife/pub_120.png',\n            distance: 1404,\n            geocodes: {\n                main: {\n                    latitude: 23.793330075666095,\n                    longitude: 90.40322404501005,\n                },\n            },\n            address: 'House #15, Road #17, Block #C, Banani',\n            name: 'Ruchita Bar & Restaurant',\n        },\n        {\n            id: '4bf390083f86c9b6ce4ab21c',\n            imgUrl: 'https://ss3.4sqi.net/img/categories_v2/food/asian_120.png',\n            distance: 1404,\n            geocodes: {\n                main: {\n                    latitude: 23.793330075666095,\n                    longitude: 90.40322404501005,\n                },\n            },\n            address: 'House #15, Road #17, Block #C, Banani',\n            name: 'Star Kabab & Restaurant',\n        },\n        {\n            id: '4bf390083f86c9b6ce4ab21c',\n            imgUrl: 'https://ss3.4sqi.net/img/categories_v2/food/indian_120.png',\n            distance: 1404,\n            geocodes: {\n                main: {\n                    latitude: 23.793330075666095,\n                    longitude: 90.40322404501005,\n                },\n            },\n            address: 'House #15, Road #17, Block #C, Banani',\n            name: 'Star Kabab & Restaurant',\n        },\n    ];\n\n    const showRestaurantDetails = () => {\n        setVisible(true);\n    };\n    const onCloseRestaurantDetails = () => {\n        setVisible(false);\n    };\n\n    return (\n        <section>\n            <List\n                grid={{ gutter: 30, xs: 1, sm: 1, md: 2, lg: 2, xl: 3, xxl: 3 }}\n                itemLayout=\"vertical\"\n                dataSource={restaurants}\n                renderItem={(restaurant, index) => (\n                    <List.Item key={index} style={{ marginBottom: '30px' }}>\n                        <RestaurantItem\n                            restaurant={restaurant}\n                            openRestaurantDetails={showRestaurantDetails}\n                        />\n                    </List.Item>\n                )}\n            />\n            {visible ? (\n                <RestaurantDetails visible={visible} onClose={onCloseRestaurantDetails} />\n            ) : (\n                ''\n            )}\n        </section>\n    );\n}\n\nexport default RestaurantList;\n","import { Action } from 'redux-actions';\nimport { Geocode } from '../../../models/location';\n\nexport enum LocationActions {\n    UPDATE_LOCATION_GEOCODE = '[LOCATION] Update Geocode',\n    UPDATE_LOCATION_RADIUS = '[LOCATION] Update Radius',\n}\n\nexport class UpdateLocationGeocodeType implements Action<Geocode> {\n    readonly type = LocationActions.UPDATE_LOCATION_GEOCODE;\n\n    constructor(public payload: Geocode) {}\n}\n\nexport class UpdateLocationRadiusType implements Action<number> {\n    readonly type = LocationActions.UPDATE_LOCATION_RADIUS;\n\n    constructor(public payload: number) {}\n}\n\nexport type LocationActionTypes = UpdateLocationRadiusType | UpdateLocationGeocodeType;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport RestaurantFinder from '../../components/restaurant-finder';\nimport RestaurantList from '../../components/restaurant-list';\nimport { LocationActions } from '../../data-store/actions/location';\n\nconst radius = 300;\nconst geocode = {\n    latitude: 23.7815271,\n    longitude: 90.3982979,\n};\n\nfunction Home() {\n    const dispatch = useDispatch();\n    dispatch({ type: LocationActions.UPDATE_LOCATION_GEOCODE, payload: geocode });\n    dispatch({ type: LocationActions.UPDATE_LOCATION_RADIUS, payload: radius });\n\n    return (\n        <div className=\"Home wrapper-container\">\n            <RestaurantFinder />\n            <RestaurantList />\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\r\nimport './header.scss';\r\nimport { Header } from 'antd/es/layout/layout';\r\n\r\nfunction AppHeader() {\r\n    return (\r\n        <Header>\r\n            <div className=\"logo\">\r\n                <img src=\"/images/logo.png\" className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport { Footer } from 'antd/es/layout/layout';\r\n\r\nfunction AppFooter() {\r\n    return <Footer style={{ textAlign: 'center' }}>© 2021 Today All Rights Reserved</Footer>;\r\n}\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\nimport { Layout } from 'antd';\n\nimport './App.scss';\nimport Home from './pages/home';\nimport AppHeader from './layout/header';\nimport AppFooter from './layout/footer';\nconst { Content } = Layout;\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout className=\"layout\">\n                <AppHeader />\n                <Content>\n                    <div className=\"site-layout-content\">\n                        <Home />\n                    </div>\n                </Content>\n                <AppFooter />\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","import { Action } from 'redux-actions';\r\nimport { Restaurant } from '../../../models/restaurant';\r\n\r\nexport enum RestaurantActions {\r\n    RESTAURANT_LIST = '[RESTAURANT] List',\r\n    RESTAURANT_LIST_SUCCESS = '[RESTAURANT] List Success',\r\n    SELECTED_RESTAURANT = '[RESTAURANT] Selected',\r\n}\r\n\r\nexport class RestaurantListType implements Action<any> {\r\n    readonly type = RestaurantActions.RESTAURANT_LIST;\r\n\r\n    constructor(public payload: string) {}\r\n}\r\n\r\nexport class RestaurantListSuccessType implements Action<Restaurant[]> {\r\n    readonly type = RestaurantActions.RESTAURANT_LIST_SUCCESS;\r\n\r\n    constructor(public payload: Restaurant[]) {}\r\n}\r\nexport class SelectedRestaurantType implements Action<Restaurant> {\r\n    readonly type = RestaurantActions.SELECTED_RESTAURANT;\r\n\r\n    constructor(public payload: Restaurant) {}\r\n}\r\n\r\nexport type RestaurantActionTypes =\r\n    | RestaurantListType\r\n    | RestaurantListSuccessType\r\n    | SelectedRestaurantType;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { LocationConfiguration } from '../../../models/location';\nimport * as fromLocationActions from '../../actions/location';\n\nconst initialState: LocationConfiguration = {\n    geocode: {\n        latitude: 0,\n        longitude: 0,\n    },\n    radius: 0,\n    categories: 13000,\n    sort: 'RELEVANCE',\n    limit: 50,\n};\n\nexport default function locationReducer(\n    state: LocationConfiguration = initialState,\n    action: fromLocationActions.LocationActionTypes\n) {\n    switch (action.type) {\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_GEOCODE: {\n            return {\n                ...state,\n                geocode: action.payload,\n            };\n        }\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_RADIUS: {\n            return {\n                ...state,\n                radius: action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import * as fromRestaurantActions from '../../actions/restaurant';\nimport { RestaurantState } from '../../../models/restaurant';\n\nconst initialState: RestaurantState = {\n    restaurants: [],\n    selectedRestaurant: null,\n};\n\nexport default function restaurantReducer(\n    state: RestaurantState = initialState,\n    action: fromRestaurantActions.RestaurantActionTypes\n) {\n    switch (action.type) {\n        case fromRestaurantActions.RestaurantActions.RESTAURANT_LIST_SUCCESS: {\n            return {\n                ...state,\n                restaurants: action.payload,\n            };\n        }\n        case fromRestaurantActions.RestaurantActions.SELECTED_RESTAURANT: {\n            return {\n                ...state,\n                selectedRestaurant: action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport locationReducer from './location';\nimport restaurantReducer from './restaurant';\n\nconst rootReducer = combineReducers<any>({\n    location: locationReducer,\n    restaurant: restaurantReducer,\n});\n\nexport default rootReducer;\n","import { Middleware } from 'redux';\r\n\r\nexport const loggerMiddleware: Middleware = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n    let result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './data-store/store';\n\nimport './index.less';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from '../reducers';\r\nimport { loggerMiddleware } from '../../middleware';\r\n\r\nexport default function configureStore(initialState?: any) {\r\n    const middleware = applyMiddleware(loggerMiddleware, thunkMiddleware);\r\n\r\n    const store = createStore(rootReducer as any, initialState as any, middleware);\r\n\r\n    return store;\r\n}\r\n"],"sourceRoot":""}