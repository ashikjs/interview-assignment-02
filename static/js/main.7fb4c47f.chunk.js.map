{"version":3,"sources":["data-store/actions/restaurant/index.ts","components/restaurant-finder/index.tsx","components/restaurant-item/index.tsx","components/google-map/index.tsx","components/restaurant-details/index.tsx","components/restaurant-list/index.tsx","data-store/actions/location/index.ts","deserializ/restaurant/index.ts","share/services/restaurant/restaurant.service.ts","pages/home/index.tsx","layout/header/index.tsx","layout/footer/index.tsx","App.tsx","reportWebVitals.ts","data-store/reducers/location/index.ts","data-store/reducers/restaurant/index.ts","data-store/reducers/index.ts","middleware/logger-middleware.ts","index.tsx","data-store/store/index.ts"],"names":["RestaurantActions","Search","Input","RestaurantFinder","dispatch","useDispatch","className","type","size","onClick","SELECTED_RANDOM_RESTAURANT","payload","placeholder","loading","RestaurantItem","props","restaurant","name","iconUrl","address","Item","Meta","avatar","src","shape","title","description","style","marginBottom","openRestaurantDetails","SELECTED_RESTAURANT","GoogleMapView","lat","lng","zoom","height","width","googleMapsApiKey","process","mapContainerStyle","center","position","Title","Typography","RestaurantDetails","useSelector","state","selectedRestaurant","visible","onClose","category","geocode","popularity","price","rating","distance","details","placement","padding","latitude","longitude","level","RestaurantList","LocationActions","restaurants","useState","setVisible","showRestaurantDetails","grid","gutter","xs","sm","md","lg","xl","xxl","itemLayout","dataSource","renderItem","index","RestaurantDeserialize","restaurantBackendData","id","contact","this","fsq_id","generateAddress","location","geocodes","main","categories","generateCategoryIconUrl","toFixed","loc","crossStreet","cross_street","locality","country","icon","prefix","suffix","a","URL","headers","Accept","axios","get","results","status","data","map","res","Home","UPDATE_LOCATION_GEOCODE","UPDATE_LOCATION_RADIUS","getRestaurant","then","RESTAURANT_LIST","catch","error","console","info","AppHeader","alt","AppFooter","textAlign","Content","Layout","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","radius","sort","limit","rootReducer","combineReducers","action","fromLocationActions","fromRestaurantActions","randomRIndex","Math","floor","random","length","loggerMiddleware","store","next","group","result","log","getState","groupEnd","middleware","applyMiddleware","thunkMiddleware","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fb4c47f.chunk.js","sourcesContent":["import { Action } from 'redux-actions';\r\nimport { Restaurant } from '../../../models/restaurant';\r\n\r\nexport enum RestaurantActions {\r\n    RESTAURANT_LIST = '[RESTAURANT] List',\r\n    SELECTED_RANDOM_RESTAURANT = '[RESTAURANT] Random Selected',\r\n    SELECTED_RESTAURANT = '[RESTAURANT] Selected',\r\n}\r\n\r\nexport class RestaurantListType implements Action<Restaurant[]> {\r\n    readonly type = RestaurantActions.RESTAURANT_LIST;\r\n\r\n    constructor(public payload: Restaurant[]) {}\r\n}\r\n\r\nexport class SelectedRandomRestaurantType implements Action<any> {\r\n    readonly type = RestaurantActions.SELECTED_RANDOM_RESTAURANT;\r\n\r\n    constructor(public payload: any) {}\r\n}\r\n\r\nexport class SelectedRestaurantType implements Action<Restaurant> {\r\n    readonly type = RestaurantActions.SELECTED_RESTAURANT;\r\n\r\n    constructor(public payload: Restaurant) {}\r\n}\r\n\r\nexport type RestaurantActionTypes =\r\n    | RestaurantListType\r\n    | SelectedRandomRestaurantType\r\n    | SelectedRestaurantType;\r\n","import React from 'react';\nimport { Button, Input } from 'antd';\nconst { Search } = Input;\nimport { useDispatch } from 'react-redux';\nimport './Restaurant-finder.scss';\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\n\nfunction RestaurantFinder() {\n    const dispatch = useDispatch();\n    const isSearchLoading: boolean = false;\n    const getRandomRestaurant = () => {\n        dispatch({ type: RestaurantActions.SELECTED_RANDOM_RESTAURANT, payload: '' });\n    };\n    return (\n        <section>\n            <div className=\"restaurant-finder\">\n                <Button type=\"primary\" size=\"large\" onClick={getRandomRestaurant}>\n                    Pick a Random Restaurant\n                </Button>\n                <span className=\"alter-text\">Or</span>\n                <Search\n                    placeholder=\"Search restaurant by key word\"\n                    loading={isSearchLoading}\n                    size=\"large\"\n                />\n            </div>\n        </section>\n    );\n}\n\nexport default RestaurantFinder;\n","import React from 'react';\nimport { Avatar, Button, List } from 'antd';\nimport './Restaurant-item.scss';\nimport { useDispatch } from 'react-redux';\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\n\nexport const RestaurantItem = (props: any) => {\n    const dispatch = useDispatch();\n    let { name, iconUrl, address } = props?.restaurant;\n\n    const openRestaurantDetails = () => {\n        props.openRestaurantDetails();\n        dispatch({ type: RestaurantActions.SELECTED_RESTAURANT, payload: props?.restaurant });\n    };\n\n    return (\n        <List.Item.Meta\n            className=\"restaurant-item\"\n            avatar={<Avatar src={iconUrl} size={80} shape=\"square\" />}\n            title={<span>{name}</span>}\n            description={\n                <>\n                    <p style={{ marginBottom: '5px' }}>{address}</p>\n                    <Button type=\"primary\" size={'small'} onClick={openRestaurantDetails}>\n                        Details\n                    </Button>\n                </>\n            }\n        />\n    );\n};\n","import React from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nfunction GoogleMapView(props: any) {\n    const { lat, lng, zoom, height = '260px', width = '100%' } = props;\n    const apiKey = process.env.REACT_APP_MAP_API_KEY;\n    return (\n        <LoadScript googleMapsApiKey={`${apiKey}`}>\n            <GoogleMap mapContainerStyle={{ height, width }} center={{ lat, lng }} zoom={zoom}>\n                <Marker position={{ lat, lng }} />\n            </GoogleMap>\n        </LoadScript>\n    );\n}\n\nexport default GoogleMapView;\n","import React from 'react';\nimport { Avatar, Typography, Space, Drawer } from 'antd';\n\nimport './restaurant-details.scss';\n\nimport GoogleMapView from '../google-map';\nimport { useSelector } from 'react-redux';\nimport { Restaurant } from '../../models/restaurant';\n\nconst { Title } = Typography;\n\nfunction RestaurantDetails(props: any) {\n    const mapZoomLevel: number = 16;\n    const restaurant: Restaurant = useSelector((state: any) => state.restaurant.selectedRestaurant);\n\n    const { visible, onClose } = props;\n    const {\n        name,\n        category,\n        geocode,\n        address,\n        popularity,\n        price,\n        rating,\n        iconUrl,\n        distance,\n        details,\n    } = restaurant;\n    return (\n        <Drawer\n            className={'restaurant-details-drawer'}\n            title={`Restaurant details`}\n            placement=\"right\"\n            width={600}\n            onClose={onClose}\n            visible={visible}\n            style={{ padding: 0 }}\n        >\n            <GoogleMapView lat={geocode.latitude} lng={geocode.longitude} zoom={mapZoomLevel} />\n            <div className=\"restaurant-details\">\n                <Title level={2}>{name}</Title>\n                <Title level={5}>{address}</Title>\n                {!!details && <p>{details}</p>}\n                <Space size={10} className=\"categories\">\n                    <Avatar src={iconUrl} />\n                    <span>{category}</span>\n                </Space>\n\n                <ul>\n                    {!!distance && (\n                        <li>\n                            <b>Distance:</b> {distance}Km\n                        </li>\n                    )}\n                    {!!popularity && (\n                        <li>\n                            <b>Popularity:</b> {popularity}\n                        </li>\n                    )}\n                    {!!price && (\n                        <li>\n                            <b>Price:</b> {price}\n                        </li>\n                    )}\n                    {!!rating && (\n                        <li>\n                            <b>Rating:</b> {rating}\n                        </li>\n                    )}\n                </ul>\n            </div>\n        </Drawer>\n    );\n}\n\nexport default RestaurantDetails;\n","import React, { useState } from 'react';\n\nimport { List } from 'antd';\nimport { RestaurantItem } from '../restaurant-item';\nimport RestaurantDetails from '../restaurant-details';\nimport { useSelector } from 'react-redux';\nimport { Restaurant } from '../../models/restaurant';\n\nfunction RestaurantList() {\n    const [visible, setVisible] = useState(false);\n    let restaurants: Restaurant[];\n    restaurants = useSelector((state: any) => state.restaurant.restaurants);\n    const showRestaurantDetails = () => {\n        setVisible(true);\n    };\n    const onCloseRestaurantDetails = () => {\n        setVisible(false);\n    };\n\n    return (\n        <section>\n            <List\n                grid={{ gutter: 30, xs: 1, sm: 1, md: 2, lg: 2, xl: 3, xxl: 3 }}\n                itemLayout=\"vertical\"\n                dataSource={restaurants}\n                renderItem={(restaurant, index) => (\n                    <List.Item key={index} style={{ marginBottom: '30px' }}>\n                        <RestaurantItem\n                            restaurant={restaurant}\n                            openRestaurantDetails={showRestaurantDetails}\n                        />\n                    </List.Item>\n                )}\n            />\n            {visible ? (\n                <RestaurantDetails visible={visible} onClose={onCloseRestaurantDetails} />\n            ) : (\n                ''\n            )}\n        </section>\n    );\n}\n\nexport default RestaurantList;\n","import { Action } from 'redux-actions';\nimport { Geocode } from '../../../models/location';\n\nexport enum LocationActions {\n    UPDATE_LOCATION_GEOCODE = '[LOCATION] Update Geocode',\n    UPDATE_LOCATION_RADIUS = '[LOCATION] Update Radius',\n}\n\nexport class UpdateLocationGeocodeType implements Action<Geocode> {\n    readonly type = LocationActions.UPDATE_LOCATION_GEOCODE;\n\n    constructor(public payload: Geocode) {}\n}\n\nexport class UpdateLocationRadiusType implements Action<number> {\n    readonly type = LocationActions.UPDATE_LOCATION_RADIUS;\n\n    constructor(public payload: number) {}\n}\n\nexport type LocationActionTypes = UpdateLocationRadiusType | UpdateLocationGeocodeType;\n","import { Restaurant } from '../../models/restaurant';\r\nimport { Geocode } from '../../models/location';\r\n\r\nexport class RestaurantDeserialize implements Restaurant {\r\n    id: string;\r\n\r\n    name: string;\r\n\r\n    address: string;\r\n\r\n    iconUrl: string;\r\n\r\n    geocode: Geocode;\r\n\r\n    details?: string;\r\n\r\n    category?: string;\r\n\r\n    contact?: string;\r\n\r\n    popularity?: string;\r\n\r\n    price?: string;\r\n\r\n    rating?: string;\r\n\r\n    distance?: string;\r\n\r\n    constructor(restaurantBackendData: any) {\r\n        this.id = restaurantBackendData.fsq_id;\r\n        this.name = restaurantBackendData.name;\r\n        this.address = this.generateAddress(restaurantBackendData.location);\r\n        this.geocode = restaurantBackendData.geocodes.main;\r\n        this.iconUrl = restaurantBackendData.categories[0]\r\n            ? this.generateCategoryIconUrl(restaurantBackendData.categories[0])\r\n            : '';\r\n        this.distance = (restaurantBackendData.distance / 1000).toFixed(2);\r\n        this.category = restaurantBackendData.categories[0]\r\n            ? restaurantBackendData.categories[0].name\r\n            : null;\r\n    }\r\n\r\n    private generateAddress(loc: any): string {\r\n        const crossStreet = loc.cross_street ? ' ' + loc.cross_street : '';\r\n        const locality = loc.locality ? ' ' + loc.locality : '';\r\n        return loc?.address ? loc?.address : loc.country + crossStreet + locality;\r\n    }\r\n\r\n    private generateCategoryIconUrl(category: any): string {\r\n        return category.icon.prefix + '120' + category.icon.suffix;\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { RestaurantDeserialize } from '../../../deserializ/restaurant';\r\n\r\nexport async function getRestaurant() {\r\n    const locationApi = process.env.REACT_APP_LOCATION_API;\r\n\r\n    const URL = `${locationApi}/restaurants`;\r\n\r\n    const headers = {\r\n        Accept: 'application/json',\r\n    };\r\n\r\n    const results = await axios.get(URL, { headers });\r\n\r\n    if (results.status === 200)\r\n        return results.data?.map((res: any) => new RestaurantDeserialize(res));\r\n\r\n    return null;\r\n}\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\n// @Components\nimport RestaurantFinder from '../../components/restaurant-finder';\nimport RestaurantList from '../../components/restaurant-list';\n\n// @Action\nimport { LocationActions } from '../../data-store/actions/location';\nimport { RestaurantActions } from '../../data-store/actions/restaurant';\n\n// @Model\nimport { Restaurant } from '../../models/restaurant';\n\n// @Service\nimport { getRestaurant } from '../../share/services/restaurant';\n\nconst radius = 300;\nconst geocode = {\n    latitude: 23.7815271,\n    longitude: 90.3982979,\n};\n\nfunction Home() {\n    const dispatch = useDispatch();\n    dispatch({ type: LocationActions.UPDATE_LOCATION_GEOCODE, payload: geocode });\n    dispatch({ type: LocationActions.UPDATE_LOCATION_RADIUS, payload: radius });\n\n    function getAllRestaurants() {\n        getRestaurant()\n            .then((restaurants: Restaurant[]) => {\n                dispatch({ type: RestaurantActions.RESTAURANT_LIST, payload: restaurants });\n            })\n            .catch((error) => {\n                console.info('GetAllRestaurants::', error);\n            });\n    }\n\n    getAllRestaurants();\n\n    return (\n        <div className=\"Home wrapper-container\">\n            <RestaurantFinder />\n            <RestaurantList />\n        </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\r\nimport './header.scss';\r\nimport { Header } from 'antd/es/layout/layout';\r\n\r\nfunction AppHeader() {\r\n    return (\r\n        <Header>\r\n            <div className=\"logo\">\r\n                <img src=\"images/logo.png\" className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default AppHeader;\r\n","import React from 'react';\r\nimport { Footer } from 'antd/es/layout/layout';\r\n\r\nfunction AppFooter() {\r\n    return <Footer style={{ textAlign: 'center' }}>© 2021 Today All Rights Reserved</Footer>;\r\n}\r\n\r\nexport default AppFooter;\r\n","import React from 'react';\nimport { Layout } from 'antd';\n\nimport './App.scss';\nimport Home from './pages/home';\nimport AppHeader from './layout/header';\nimport AppFooter from './layout/footer';\nconst { Content } = Layout;\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout className=\"layout\">\n                <AppHeader />\n                <Content>\n                    <div className=\"site-layout-content\">\n                        <Home />\n                    </div>\n                </Content>\n                <AppFooter />\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import { LocationConfiguration } from '../../../models/location';\nimport * as fromLocationActions from '../../actions/location';\n\nconst initialState: LocationConfiguration = {\n    geocode: {\n        latitude: 0,\n        longitude: 0,\n    },\n    radius: 0,\n    categories: 13000,\n    sort: 'RELEVANCE',\n    limit: 50,\n};\n\nexport default function locationReducer(\n    state: LocationConfiguration = initialState,\n    action: fromLocationActions.LocationActionTypes\n) {\n    switch (action.type) {\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_GEOCODE: {\n            return {\n                ...state,\n                geocode: action.payload,\n            };\n        }\n        case fromLocationActions.LocationActions.UPDATE_LOCATION_RADIUS: {\n            return {\n                ...state,\n                radius: action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import * as fromRestaurantActions from '../../actions/restaurant';\nimport { RestaurantState } from '../../../models/restaurant';\n\nconst initialState: RestaurantState = {\n    restaurants: [],\n    selectedRestaurant: null,\n};\n\nexport default function restaurantReducer(\n    state: RestaurantState = initialState,\n    action: fromRestaurantActions.RestaurantActionTypes\n) {\n    switch (action.type) {\n        case fromRestaurantActions.RestaurantActions.RESTAURANT_LIST: {\n            return {\n                ...state,\n                restaurants: action.payload,\n            };\n        }\n        case fromRestaurantActions.RestaurantActions.SELECTED_RANDOM_RESTAURANT: {\n            const randomRIndex = Math.floor(Math.random() * state.restaurants.length);\n\n            return {\n                ...state,\n                selectedRestaurant: state.restaurants[randomRIndex],\n            };\n        }\n        case fromRestaurantActions.RestaurantActions.SELECTED_RESTAURANT: {\n            return {\n                ...state,\n                selectedRestaurant: action.payload,\n            };\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport locationReducer from './location';\nimport restaurantReducer from './restaurant';\n\nconst rootReducer = combineReducers<any>({\n    location: locationReducer,\n    restaurant: restaurantReducer,\n});\n\nexport default rootReducer;\n","import { Middleware } from 'redux';\r\n\r\nexport const loggerMiddleware: Middleware = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n    let result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './data-store/store';\n\nimport './index.less';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from '../reducers';\r\nimport { loggerMiddleware } from '../../middleware';\r\n\r\nexport default function configureStore(initialState?: any) {\r\n    const middleware = applyMiddleware(loggerMiddleware, thunkMiddleware);\r\n\r\n    const store = createStore(rootReducer as any, initialState as any, middleware);\r\n\r\n    return store;\r\n}\r\n"],"sourceRoot":""}